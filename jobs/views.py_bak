# Create your views here.
from django.template import Context, loader
from django.http import HttpResponse
from jobs.models import Job
from jobs.models import Location
from django.utils import simplejson

#==============================================
import types
from django.db import models
from django.utils import simplejson as json
from django.core.serializers.json import DateTimeAwareJSONEncoder
from decimal import *

class CJsonEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, datetime):
            return obj.strftime('%Y-%m-%d %H:%M:%S')
        elif isinstance(obj, date):
            return obj.strftime('%Y-%m-%d')
        else:
            return json.JSONEncoder.default(self, obj)

def json_encode(data):
    """
    The main issues with django's default json serializer is that properties that
    had been added to a object dynamically are being ignored (and it also has 
    problems with some models).
    """

    def _any(data):
        print "data:" 
	print data
	print "type:" 
  	print type(data) 
        ret = None
        if type(data) is types.ListType:
            ret = _list(data)
        elif type(data) is types.DictType:
            ret = _dict(data)
        elif isinstance(data, Decimal):
            # json.dumps() cant handle Decimal
            ret = str(data)
        elif isinstance(data, models.query.QuerySet):
            # Actually its the same as a list ...
            ret = _list(data)
        elif isinstance(data, models.Model):
            ret = _model(data)
	else:
            ret = data
	return ret
    
    def _model(data):
        ret = {}
        # If we only have a model, we only want to encode the fields.
        for f in data._meta.fields:
            ret[f.attname] = _any(getattr(data, f.attname))
        # And additionally encode arbitrary properties that had been added.
        fields = dir(data.__class__) + ret.keys()
        add_ons = [k for k in dir(data) if k not in fields]
        for k in add_ons:
            ret[k] = _any(getattr(data, k))
        return ret
    
    def _list(data):
        ret = []
        for v in data:
            ret.append(_any(v))
        return ret
    
    def _dict(data):
        ret = {}
        for k,v in data.items():
            ret[k] = _any(v)
        return ret
    
    ret = _any(data)
    print ret
    #return json.dumps(ret)
    return json.dumps(ret, cls=DateTimeAwareJSONEncoder)
    #return json.dumps(ret, cls=CJsonEncoder)

#==============================================

def hello(request):
    return HttpResponse("Hello World")

def index(request):
    object_list = Job.objects.order_by('-pub_date')[:10]
    t = loader.get_template('job_list.html')
    c = Context({
	'object_list':object_list,
    })
    return HttpResponse(t.render(c))

def get_host_json(request):
    json = {'name':'jiang'}
    return HttpResponse(simplejson.dumps(json, ensure_ascii=False))

def some_view(request):
    to_json = {
        "key1": "value1",
        "key2": "value2"
    }
    return HttpResponse(simplejson.dumps(to_json), mimetype='application/json')

from django.core import serializers
def jobs_list(request):
    #object_list = Location.objects.all()
    #jsonstr = json_encode(object_list)
    #raw = Location.objects.get(id=1)
    #print raw.toJson()
    
    data = serializers.serialize("json", Location.objects.all())
    print data
    print '!!!!!!!!!!!!!!'
    jdata = json_encode(Location.objects.get(id=1))
    print jdata
    #data = serializers.serialize('xml', Location.objects.all())
    #return HttpResponse(simplejson.dumps(jsonstr), mimetype='application/json')
    #return HttpResponse(simplejson.dumps(raw.toJson()), mimetype='application/json')
    #return HttpResponse(simplejson.dumps(data, ensure_ascii=False),mimetype='application/json')
    return HttpResponse(data)
